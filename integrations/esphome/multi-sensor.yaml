#Define Project
substitutions:
  name: multi-sensor
  version: "1.0.0"
  device_description: ${name} - version ${version}.

esphome:
  name: "${name}"
  friendly_name: Multi-Sensor
  comment: Multi-Sensor
  name_add_mac_suffix: true

  project:
    name: "ProjectInitiative.Multi-Sensor"
    version: "${version}"

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:

captive_portal:
  
# # Buzzer
# output:
#   - platform: ledc
#     pin: GPIO22 
#     id: rtttl_out

# rtttl:
#   output: rtttl_out
#   on_finished_playback:
#   - logger.log: 'Song ended!'

# # CO2 sensor comms
# # For this to work you may have to set logger baud_rate to 0
# uart:
#   - id: co2
#     rx_pin: 3
#     tx_pin: 1
#     baud_rate: 9600

# # Light sensor comms
# i2c:
#   - id: light
#     sda: 18
#     scl: 19
#     scan: true    

number:
  - platform: template
    name: DHT22 Temperature Offset
    id: dht22_temperature_offset
    restore_value: true
    initial_value: 7
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "Â°C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

sensor:
#   # Sound sensor
#   - platform: adc
#     id: adc_lyd_<name>
#     pin: 33
#     name: "Sound sensor voltage <name>"
#     update_interval: 100ms
#     attenuation: auto
#     # Don't send sound sensor readings to HA
#     internal: true
#   # Sound level measurement based upon sound sensor
#   - platform: ct_clamp
#     sensor: adc_lyd_<name>
#     name: "Sound sensor level <name>"
#     # Lower sample duration gives less reliable readings
#     sample_duration: 500ms
#     update_interval: 500ms
#     filters:
#       # Consider everything below threshold to be zero
#       # You may adjust threshold and delta to your liking
#       - lambda: |-
#           float THRESHOLD = 0.5;
#           if (x < THRESHOLD) {
#             return 0;
#           } else {
#             return x;
#           }
#       # When above threshold, only send results when more than "delta" difference since last time
#       # This reduces the amount of data sent to HA so your log doesn't fill up
#       - delta: 0.05
#   # CO2 sensor (depends on uart-config)
#   # Remove or comment out if you use the alternative design
#   - platform: mhz19
#     id: mhz19_<name>
#     uart_id: co2
#     co2:
#       name: "CO2 <name>"
#       filters:
#         - delta: 10.0
#     temperature:
#       name: "Temperature <name> (internal)"
#       filters:
#         - delta: 0.5
#       # Hide this value from  Home Assistant
#       # The MH-Z19 temperature readings are notoriously inaccurate
#       internal: true
#     # This sensor will report every 10 seconds, but only if the change is bigger than delta
#     update_interval: 10s
#     # Calibrate sensor manually through the exposed service further up
#     automatic_baseline_calibration: false
#   # Light sensor (depends on i2c-config)
#   # Remove if you use the alternative design
#   - platform: tsl2591
#     i2c_id: light
#     name: "Light <name>"
#     id: light_<name>
#     address: 0x29
#     update_interval: 2s
#     # Used to calculate/calibrate Lux
#     device_factor: 53
#     # Used to calculate/calibrate Lux
#     glass_attenuation_factor: 7.7
#     # Lower sample durataion gives less reliable readings
#     integration_time: 600ms
#     # It works really badly without gain set to auto
#     # High gain is useful at night
#     # Low gain is useful at day
#     # On Low, the sensor will always show -1 in bright daylight
#     # On auto, calculated Lux will go to -1 when the sensor is over or under saturated
#     # but it will change gain automataically, and the next reading will be sensible
#     gain: auto
#     visible:
#       name: "Visible light <name>"
#       internal: true
#     infrared:
#       name: "Infrared light <name>"
#       internal: false
#       filters: 
#         - delta: 10.0      
#     full_spectrum:
#       name: "Full spectrum light <name>"
#       internal: true
#     calculated_lux:
#       id: i_lux
#       accuracy_decimals: 0
#       name: "Lux <name>"
#       filters: 
#         # Don't bother sending result if Lux is below zero
#         # This will make the stats from the sensor nicer and you avoid having sudden -1 when changing gains
#         - lambda: |-
#             float MIN = 0.0;
#             if (MIN <= x) return x;
#             else return {};
#         - delta: 10.0
#   # START alternative light sensor
#   # Light sensor for the alternative design
#   # Uncomment if you use the alternative design
  - platform: adc
    pin: A0
    name: "Illuminance sensor"
    device_class: illuminance
    unit_of_measurement: lx
   # Without this, you can't measure the full range of lux this unit is capable of
    attenuation: auto
    filters:
     # Conversion formula to Lux
     # https://esphome.io/cookbook/temt6000.html
      - lambda: |-
          return (x / 10000.0) * 2000000.0;
      - delta: 10.0
    update_interval: 10s
  # END alternative light sensor
  # Temperature and relative humidity sensor
  - platform: dht
    model: DHT22
    pin:
      number: GPIO5
      mode:
        input: true
        pullup: true
    temperature:
      name: "Temperature"
      filters:
        - lambda: return x - id(dht22_temperature_offset).state;
        # Because the temperature sensor is partly within an enclosure with othe electronics, the measured 
        # temperature will be higher than the real room temperature. Monitor real temperature and set an 
        # offset to calibrate the temperature correctly
        # - offset: -6
        - delta: 0.5        
    humidity:
      name: "Relative humidity"
      filters:
        - delta: 1.0
    update_interval: 10s

# Motion sensor
binary_sensor:
  - platform: gpio
    pin: GPIO27
    name: "Motion sensor"
    device_class: motion          
